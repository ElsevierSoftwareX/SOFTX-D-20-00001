name: CI

on: [push]

jobs:
  pytest:
    name: pytest for py${{ matrix.python-version }}

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache pip
      uses: actions/cache@v2
      with:
        # This path is specific to Ubuntu
        path: ~/.cache/pip
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-
    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel
        pip install flake8 pytest pytest-cov coveralls
    - name: Install package
      run: |
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install -e .
    - name: Test with pytest
      run: |
        pytest --cov=src tests/
    - name: Coveralls
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
      run: |
        coveralls
        
  pytest-macOS:
    name: pytest on macOS

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Cache pip
      uses: actions/cache@v2
      with:
        # This path is specific to Ubuntu
        path: ~/Library/Caches/pip
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-
    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
    - name: Install package
      run: |
        brew install pkg-config
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install -e .
    - name: Test with pytest
      run: |
        pytest
        
  package-checks:
    name: package checks

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Cache pip
      uses: actions/cache@v2
      with:
        # This path is specific to Ubuntu
        path: ~/.cache/pip
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-
    - name: Install check dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel check-manifest twine
    - name: Check package metadata
      run: |
        python setup.py sdist check --strict --metadata
    - name: Check package manifest
      run: |
        check-manifest
    - name: Check package long description
      run: |
        twine check dist/*

  lint:

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Cache pip
      uses: actions/cache@v2
      with:
        # This path is specific to Ubuntu
        path: ~/.cache/pip
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-
    - name: Install lint dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 isort
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 src tests setup.py --exclude=__init__.py --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 src tests setup.py --exclude=__init__.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Lint with isort
      run: |
        isort --verbose --check-only --diff --recursive src tests setup.py
    - name: Lint with GitHub Super-Linter
      uses: github/super-linter@v3.1.1
    # venv method from https://github.com/github/super-linter/issues/157#issuecomment-648850330
    # - name: Build virtual environment
    #   run: |
    #     python -m venv .venv
    #     .venv/bin/pip install setuptools wheel
    #     .venv/bin/pip install -r requirements.txt
    #     .venv/bin/pip install -e .
    # - name: Move dependencies
    #   run: mv  .venv /home/runner/work/_temp/_github_workflow
    # - name: Lint with GitHub Super-Linter
    #   uses: github/super-linter@v3.1.0
    #   env:
    #     VALIDATE_ALL_CODEBASE: true
    #     PYTHONPATH: "/github/workspace/:\
    #       /github/workflow/.venv/lib/python3.6/site-packages"
